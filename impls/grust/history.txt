#V2
'1
@d
(+ 1 2)
(+ 1 4)
(+ 1 (- 3 2))
(+ 1 2)
(1 2)
1
2
()
(+ 1 1)
(def! x 4)
x
(def! d 4)
d
(def! d 9)
d
(def! d 9)
d
(def! d 9)
d
(def! d 9)
d
(def! d 9)
d
(def! d 9)
d
(def! d 9)
d
(def! d 9)
d
(def! d 9)
d
(def! d 9)
d
(def! d 9)
d
(fn* a (+ 1 2))
(a 3 4)
(def! d 9)
d
(fn* a (+ 1 2))
(+ 1 2)
(def! d 9)
d
(def! d 9)
d
(def! d 9)
d
(def! d 9)
d
(def! d 9)
d
(def! d 9)
d
(def! d 9)
d
(+ 1 2)
(def! d 9)
d
(def! d 9)
d
(def! d 9)
d
(+ 1 2)
(def! d 9)
d
(def! d 9)
d
(fn* (a) a)
( (fn* (a) a) 7)
(+ 1 2)
(list)
(if (> (count (list 1 2 3)) 3) 89 78)
(do (prn 101))
(str "\\\\"")
 (str "")
(load-file "../tests/incA.mal")
(inc4 3)
(def! a (atom 2))
(def! load-file (fn* (f) (eval (read-string (str "(do " (slurp f) "\\nnil)")))))
(load-file "../tests/computations.mal")
(load-file "../tests/inc.mal")
(slurp "../tests/computations.mal"
(slurp "../tests/computations.mal")
(do (slurp "../tests/computations.mal"))
(str (do (slurp "../tests/computations.mal")))
(str "(do "(slurp "../tests/computations.mal") "\\nnil)")
(eval (str "(do "(slurp "../tests/computations.mal") "\\nnil)"))
(eval (read-string (str "(do "(slurp "../tests/computations.mal") "\\nnil)")))
(read-string (str "(do "(slurp "../tests/computations.mal") "\\nnil)"))
(def! atm (atom 9))
atm
(deref atm)
@atm
(def! atm (atom 9))
(deref atm)
@atm
(def! atm (atom 9))
@atm
